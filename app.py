import streamlit as stimport preprocessorimport helperimport matplotlib.pyplot as pltimport seaborn as sns# Set page configurationst.set_page_config(page_title="Whatsapp Chat Analyzer", layout="wide")# Custom CSS for dark and white theme with responsive hover effectst.markdown(    """    <style>    /* Main content and sidebar background color */    .main {        background-color: #121212;  /* Dark background */        color: #ffffff;  /* White text */    }    .sidebar .sidebar-content {        background-color: #1e1e1e;  /* Slightly lighter dark background */        color: #ffffff;  /* White text */    }    /* Title styling */    h1, h2, h3, h4 {        color: #4CAF50;  /* Green color for headings */    }    /* Metric styling */    .stMetric {        font-size: 1.5em;        color: #ffffff;  /* White text for metrics */    }    /* Hover effect for responsiveness */    .stMetric:hover, .element-container:hover, .stPlotlyChart:hover, .stDataFrame:hover {        transform: scale(1.05);        transition: transform 0.3s ease;    }    /* Center the sidebar title */    .sidebar .sidebar-content h1 {        text-align: center;    }    </style>    """,    unsafe_allow_html=True)# Sidebar configurationst.sidebar.markdown("<h1>Whatsapp Chat Analyzer</h1>", unsafe_allow_html=True)st.sidebar.write("Supports 24-Hour Format")uploaded_file = st.sidebar.file_uploader("Choose a file")if uploaded_file is not None:    bytes_data = uploaded_file.getvalue()    data = bytes_data.decode("utf-8")    df = preprocessor.preprocess(data)    # Fetch unique users    user_list = df['user'].unique().tolist()    user_list.remove('group_notification')    user_list.sort()    user_list.insert(0, "Overall")    selected_user = st.sidebar.selectbox("Show analysis with respect to", user_list)    if st.sidebar.button("Show Analysis"):        # Stats Area        st.markdown("<h2>Top Statistics</h2>", unsafe_allow_html=True)        num_messages, words, num_media_messages, num_links = helper.fetch_stats(selected_user, df)        col1, col2, col3, col4 = st.columns(4)        with col1:            st.metric("Total Messages", num_messages)        with col2:            st.metric("Total Words", words)        with col3:            st.metric("Media Shared", num_media_messages)        with col4:            st.metric("Links Shared", num_links)        # Monthly timeline        st.markdown("<h2>Monthly Timeline</h2>", unsafe_allow_html=True)        timeline = helper.monthly_timeline(selected_user, df)        fig, ax = plt.subplots()        ax.plot(timeline['time'], timeline['message'], color='green', marker='o')        ax.set_title('Monthly Timeline', fontsize=14, color='white')        ax.set_xlabel('Time', fontsize=12, color='white')        ax.set_ylabel('Messages', fontsize=12, color='white')        ax.tick_params(axis='x', colors='white')        ax.tick_params(axis='y', colors='white')        plt.xticks(rotation='vertical')        st.pyplot(fig)        # Daily timeline        st.markdown("<h2>Daily Timeline</h2>", unsafe_allow_html=True)        daily_timeline = helper.daily_timeline(selected_user, df)        fig, ax = plt.subplots()        ax.plot(daily_timeline['only_date'], daily_timeline['message'], color='black', marker='o')        ax.set_title('Daily Timeline', fontsize=14, color='white')        ax.set_xlabel('Date', fontsize=12, color='white')        ax.set_ylabel('Messages', fontsize=12, color='white')        ax.tick_params(axis='x', colors='white')        ax.tick_params(axis='y', colors='white')        plt.xticks(rotation='vertical')        st.pyplot(fig)        # Activity map        st.markdown("<h2>Activity Map</h2>", unsafe_allow_html=True)        col1, col2 = st.columns(2)        with col1:            st.subheader("Most Busy Day")            busy_day = helper.week_activity_map(selected_user, df)            fig, ax = plt.subplots()            ax.bar(busy_day.index, busy_day.values, color='purple')            ax.set_title('Most Busy Day', fontsize=14, color='white')            ax.set_xlabel('Day', fontsize=12, color='white')            ax.set_ylabel('Messages', fontsize=12, color='white')            ax.tick_params(axis='x', colors='white')            ax.tick_params(axis='y', colors='white')            plt.xticks(rotation='vertical')            st.pyplot(fig)        with col2:            st.subheader("Most Busy Month")            busy_month = helper.month_activity_map(selected_user, df)            fig, ax = plt.subplots()            ax.bar(busy_month.index, busy_month.values, color='orange')            ax.set_title('Most Busy Month', fontsize=14, color='white')            ax.set_xlabel('Month', fontsize=12, color='white')            ax.set_ylabel('Messages', fontsize=12, color='white')            ax.tick_params(axis='x', colors='white')            ax.tick_params(axis='y', colors='white')            plt.xticks(rotation='vertical')            st.pyplot(fig)        st.markdown("<h2>Weekly Activity Heatmap</h2>", unsafe_allow_html=True)        user_heatmap = helper.activity_heatmap(selected_user, df)        fig, ax = plt.subplots()        sns.heatmap(user_heatmap, ax=ax, cmap="YlGnBu", linewidths=0.5)        ax.set_title('Weekly Activity Heatmap', fontsize=14, color='white')        st.pyplot(fig)        # Finding the busiest users in the group (Group level)        if selected_user == 'Overall':            st.markdown("<h2>Most Busy Users</h2>", unsafe_allow_html=True)            x, new_df = helper.most_busy_users(df)            col1, col2 = st.columns(2)            with col1:                fig, ax = plt.subplots()                ax.bar(x.index, x.values, color='red')                ax.set_title('Most Busy Users', fontsize=14, color='white')                ax.set_xlabel('User', fontsize=12, color='white')                ax.set_ylabel('Messages', fontsize=12, color='white')                ax.tick_params(axis='x', colors='white')                ax.tick_params(axis='y', colors='white')                plt.xticks(rotation='vertical')                st.pyplot(fig)            with col2:                st.dataframe(new_df)        # WordCloud        st.markdown("<h2>Wordcloud</h2>", unsafe_allow_html=True)        df_wc = helper.create_wordcloud(selected_user, df)        fig, ax = plt.subplots()        ax.imshow(df_wc, interpolation='bilinear')        ax.axis("off")        st.pyplot(fig)        # Most common words        st.markdown("<h2>Most Common Words</h2>", unsafe_allow_html=True)        most_common_df = helper.most_common_words(selected_user, df)        fig, ax = plt.subplots()        ax.barh(most_common_df[0], most_common_df[1], color='skyblue')        ax.set_title('Most Common Words', fontsize=14, color='black')        ax.set_xlabel('Frequency', fontsize=12, color='black')        ax.set_ylabel('Words', fontsize=12, color='black')        ax.tick_params(axis='x', colors='black')        ax.tick_params(axis='y', colors='black')        plt.xticks(rotation='vertical')        st.pyplot(fig)        # Emoji analysis        st.markdown("<h2>Emoji Analysis</h2>", unsafe_allow_html=True)        emoji_df = helper.emoji_helper(selected_user, df)        col1, col2 = st.columns(2)        with col1:            st.dataframe(emoji_df)        with col2:            fig, ax = plt.subplots()            ax.pie(emoji_df['count'].head(), labels=emoji_df['emoji'].head(), autopct="%0.2f", startangle=140, colors=sns.color_palette("Paired"))            ax.set_title('Emoji Distribution', fontsize=14, color='white')            st.pyplot(fig)